# -*- coding: utf-8 -*-
"""Image Classification with MNIST Dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BDP7tN5b_J5kvcxghwxfijOn6nQAruEJ
"""

pip install tensorflow keras matplotlib

import tensorflow as tf
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Input
import numpy as np

# Load the dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Display a sample image
#plt.imshow(X_train[0], cmap='gray')
#plt.show()

# Normalize the pixel values to be between 0 and 1
X_train = X_train / 255.0
X_test = X_test / 255.0

# Create the model
model = Sequential([
    Input(shape=(28, 28)),
    Flatten(),  # Flatten the 28x28 images into a 784 element vector
    Dense(128, activation='relu'),  # Hidden layer with 128 neurons and ReLU activation
    Dense(10, activation='softmax')  # Output layer with 10 neurons (for digits 0-9)
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test))

# Evaluate the model
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f'Test accuracy: {test_acc}')

predictions = model.predict(X_test)

# Check prediction for the first test image
print(predictions[0])
print(f"Predicted label: {tf.argmax(predictions[0])}")

for i in range(5):  # Try 5 different images
    sample = X_test[i].reshape(1, 28, 28)  # Reshape if needed
    prediction = model.predict(sample)
    predicted_label = np.argmax(prediction)
    print(f"Image {i+1} - Predicted label: {predicted_label}")